parameters:
- name: windows
  type: boolean
  default: false
- name: orc_version
  type: string
  default: ""

steps:
- script: |
    which python
    python -V
  displayName: Check Python $(python.version) path

- script: python -m pip install --user -U pytest pytest-cov pytest-xdist[psutil] coverage codecov
  displayName: Install test dependencies

- ${{ if eq(parameters.windows, true) }}:
  - ${{ if ne(parameters.orc_version, '') }}:
    - script: |
        set PYORC_DEBUG=1
        set PYORC_LIB_VERSION=${{ parameters.orc_version }}
        python -m pip install -vvv --user .
      displayName: Install package
  - ${{ else }}:
    - script: |
        set PYORC_DEBUG=1
        python -m pip install -vvv --user .
      displayName: Install package

  - powershell: |
      $files = Get-ChildItem -path .\deps\orc-*\build\*\*\*-stamp\*.log
      $output = ".\\buildlogs\\logs-$env:AGENT_OS-$env:PYTHON_VER.zip"
      New-Item -Path .\ -Name "buildlogs" -ItemType "directory"
      Compress-Archive -LiteralPath $files -Destination $output
    env:
      PYTHON_VER: $(python.version)
      AGENT_OS: $(Agent.OS)
    displayName: Collect build logs
    condition: succeededOrFailed()

  - script: |
      FOR /F "tokens=* USEBACKQ" %%F IN (`python -c "import os, pyorc; print(os.path.dirname(pyorc.__file__))"`) DO (SET INSTALLDIR=%%F)
      echo %INSTALLDIR%
      python -m pytest -vs --junitxml=./test-results.xml -n auto --cov=%INSTALLDIR% tests/
    displayName: Run pytest (Windows)

- ${{ else }}:
  - ${{ if ne(parameters.orc_version, '') }}:
    - script: |
        PYORC_DEBUG=1 PYORC_LIB_VERSION=${{ parameters.orc_version }} CFLAGS="-coverage" python -m pip install -vvv --user .
      displayName: Install package
  - ${{ else }}:
    - script: |
        PYORC_DEBUG=1 CFLAGS="-coverage" python -m pip install -vvv --user .
      displayName: Install package

  - script: |
      mkdir ./buildlogs
      mkdir "$AGENT_OS-$PYTHON_VER"
      cp $(ls deps/orc-1.*/build/*/*/*-stamp/*.log) "$AGENT_OS-$PYTHON_VER"
      tar -czvf "buildlogs/logs-$AGENT_OS-$PYTHON_VER.tar.gz" "$AGENT_OS-$PYTHON_VER"
    env:
      PYTHON_VER: $(python.version)
      AGENT_OS: $(Agent.OS)
    displayName: Collect build logs
    condition: succeededOrFailed()

  - script: |
      INSTALLDIR=$(python -c "import os, pyorc; print(os.path.dirname(pyorc.__file__))")
      echo $INSTALLDIR
      python -m pytest -vs --junitxml=./test-results.xml -n auto --cov="$INSTALLDIR" tests/
    displayName: Run pytest (Unix)

- task: PublishTestResults@2
  inputs:
    testResultsFiles: test-results.xml
    testRunTitle: Tests on $(Agent.OS) with Python $(python.version)
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  inputs:
    pathtoPublish: 'buildlogs'
    artifactName: logs
  condition: succeededOrFailed()

- script: python -m codecov
  env:
    CODECOV_TOKEN: $(codecov)
  displayName: Report Coverage
  condition: succeeded()
